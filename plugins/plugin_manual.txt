Consider writing your own modules. They will be discovered and executed 
if they
   a) are placed in the plugins folder
   b) the module names start with 'check'

The following naming rules for functions apply:

Functions with names that start with "hotel" will get an ElementTree
instance of the HotelEdf as parameter.

Functions with names that start with "allotment" will get an ElementTree
instance of the AllotmentEdf as parameter.

Functions with names that start with "room" will get an ElementTree
instance of each room as parameter.
IMPORTANT: You must only raise RoomError, OccupancyError or
ChargeBlockError if your function starts with room. All other
EdfErrors will be silently ignored!

All other functions will be executed with an ElementTree
instance of the HotelEdf as first parameter and an ElementTree
instance of each room as second parameter.

Also functions which start with an underscore or double underscore 
will be executed. 

IMPORTANT: The allotmentrootnode may be None! This is because edbug
iterates over HotelEDF and looks up the corresponding AllotmentEDF
based on file naming conventions. An AllotmentEDF is not garanteed
to exist.

If you find something in the EDF that you want to report, you raise
one of the following exceptions:

HotelEdfError:     Any errors which are neither in BasicData 
                   nor in SellingData
AllotmentEdfError: All errors in AllotmentEDf, no matter where exactly 
                   the error occurs
BasicDataError:    All errors in HotelEDF/BasicData
SellingDataError:  All errors in HotelEDF/SellingData but outside Rooms
RoomError:         All errors in a Rooms/Room element but outside
                   Occupancies or ChargeBlock which have their own
                   specialised Exceptions
OccupancyError:    Any errors within an occupancy node
ChargeBlockError:  Anny errors within a ChargeBlock

HotelEdfError, AllotmentEdfError, BasicDataError and SellingDataError
take have three optional arguments. node takes a reference to the node
which is causing the error and level, which sets the loglevel (see
logging module documentation for details) and messages is a list of
ErrorMsg instances.

RoomError, OccupancyError and ChargeblockError additionally take the 
room code.

Be aware that execution of a function will stop if an exception is
raised. If you put multiple tests into one function you may want to
collect the error messages first as a list of ErrorMsg instances and
at the end of the function check the length of the list and raise
an exception passing the the list to the messages (not message) 
paramater.

See the check_allotments.py module for reference on how to do this.

Do not raise any other Exceptions apart from the above mentioned ones! 

PLEASE: The messages passed to exceptions should be concise and follow 
the DRY principle.

PLEASE: when raising an exception use the loglevel smartly and 
according to the following criteria:

   - logging.CRITICAL: Don't use this. This is only set during the
     initial checks when unpacking the data and the folder structure
     is wrong or zip file is corrupted. Critical errors are usually 
     followed by sys.exit() because further execution of the debugger
     does not make sense. You must not call sys.exit() in your plugins!

   - logging.ERROR: Anything which may lead to the EDF not showing up,
     missing required elements or attributes or any value which is so
     incredibly wrong that it deserves more than a warning.

   - logging.WARNING: Anything which is not strictly wrong but which 
     goes against good practice in EDF or just does not make much sense.
     These are usually frowned upon by Peakwork in acceptance testing
     and may lead to rejection of certification, depending on the
     project manager.
     Example: if there is no Language="**" in none of the room 
     descriptions ("**" marks a description a fallback)

   - logging.INFO: Anything which is formally correct but may be done
     in a better way. Can also be applied for elements which are 
     in the XSD but currently not implemented or to just throw useful
     information at anyone who will read the report file. Do not 
     abuse!

   - logging.DEBUG: Only information be relevant during
     plugin development but which is not useful for debugging EDF
   
Style guide: Please follow Pep 8. The only exception is line length.
Surround top-level function definitions with two blank lines. 
NEVER! use print statements in your plug-ins. Use logging.debug instead
and set -LL DEBUG when running edbug.

For any remaining questions: Look at the code, dude.
